/*
 * OpenAPI Deno oak server.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { PetService } from "./services/PetService.ts";
import { StoreService } from "./services/StoreService.ts";
import { UserService } from "./services/UserService.ts";
import { DenoServer } from "./DenoServer.ts";
import { Application, Router } from "./deps-oak.ts";
import type { RouterContext } from "./deps-oak.ts";
import { OakOpenApiRequest } from "./controllers/OakOpenApiRequestModel.ts";

export class DenoOakServer extends DenoServer<Application, Router> {
  private app: Application;
  private router: Router;
  private options?: DenoOakServerOptions;

  constructor(
    port: number,
    myPetService: PetService,
    myStoreService: StoreService,
    myUserService: UserService,
    options?: DenoOakServerOptions,
  ) {
    super(port, myPetService, myStoreService, myUserService);
    this.app = new Application();
    this.router = new Router();
    this.options = options;
  }

  protected generateRoutes(): void {
    this.createRoute("/pet", "post", "Pet", "addPet");
    this.createRoute("/pet", "options", "Pet", "addPet");

    this.createRoute("/pet", "put", "Pet", "updatePet");
    this.createRoute("/pet", "options", "Pet", "updatePet");

    this.createRoute("/pet/findByStatus", "get", "Pet", "findPetsByStatus");
    this.createRoute("/pet/findByStatus", "options", "Pet", "findPetsByStatus");

    this.createRoute("/pet/findByTags", "get", "Pet", "findPetsByTags");
    this.createRoute("/pet/findByTags", "options", "Pet", "findPetsByTags");

    this.createRoute(
      "/pet/{petId}".replace(`{${"petId"}}`, ":petId"),
      "delete",
      "Pet",
      "deletePet",
    );
    this.createRoute(
      "/pet/{petId}".replace(`{${"petId"}}`, ":petId"),
      "options",
      "Pet",
      "deletePet",
    );

    this.createRoute(
      "/pet/{petId}".replace(`{${"petId"}}`, ":petId"),
      "get",
      "Pet",
      "getPetById",
    );
    this.createRoute(
      "/pet/{petId}".replace(`{${"petId"}}`, ":petId"),
      "options",
      "Pet",
      "getPetById",
    );

    this.createRoute(
      "/pet/{petId}".replace(`{${"petId"}}`, ":petId"),
      "post",
      "Pet",
      "updatePetWithForm",
    );
    this.createRoute(
      "/pet/{petId}".replace(`{${"petId"}}`, ":petId"),
      "options",
      "Pet",
      "updatePetWithForm",
    );

    this.createRoute(
      "/pet/{petId}/uploadImage".replace(`{${"petId"}}`, ":petId"),
      "post",
      "Pet",
      "uploadFile",
    );
    this.createRoute(
      "/pet/{petId}/uploadImage".replace(`{${"petId"}}`, ":petId"),
      "options",
      "Pet",
      "uploadFile",
    );

    this.createRoute("/store/inventory", "get", "Store", "getInventory");
    this.createRoute("/store/inventory", "options", "Store", "getInventory");

    this.createRoute("/store/order", "post", "Store", "placeOrder");
    this.createRoute("/store/order", "options", "Store", "placeOrder");

    this.createRoute(
      "/store/order/{orderId}".replace(`{${"orderId"}}`, ":orderId"),
      "delete",
      "Store",
      "deleteOrder",
    );
    this.createRoute(
      "/store/order/{orderId}".replace(`{${"orderId"}}`, ":orderId"),
      "options",
      "Store",
      "deleteOrder",
    );

    this.createRoute(
      "/store/order/{orderId}".replace(`{${"orderId"}}`, ":orderId"),
      "get",
      "Store",
      "getOrderById",
    );
    this.createRoute(
      "/store/order/{orderId}".replace(`{${"orderId"}}`, ":orderId"),
      "options",
      "Store",
      "getOrderById",
    );

    this.createRoute("/user", "post", "User", "createUser");
    this.createRoute("/user", "options", "User", "createUser");

    this.createRoute(
      "/user/createWithArray",
      "post",
      "User",
      "createUsersWithArrayInput",
    );
    this.createRoute(
      "/user/createWithArray",
      "options",
      "User",
      "createUsersWithArrayInput",
    );

    this.createRoute(
      "/user/createWithList",
      "post",
      "User",
      "createUsersWithListInput",
    );
    this.createRoute(
      "/user/createWithList",
      "options",
      "User",
      "createUsersWithListInput",
    );

    this.createRoute("/user/login", "get", "User", "loginUser");
    this.createRoute("/user/login", "options", "User", "loginUser");

    this.createRoute("/user/logout", "get", "User", "logoutUser");
    this.createRoute("/user/logout", "options", "User", "logoutUser");

    this.createRoute(
      "/user/{username}".replace(`{${"username"}}`, ":username"),
      "delete",
      "User",
      "deleteUser",
    );
    this.createRoute(
      "/user/{username}".replace(`{${"username"}}`, ":username"),
      "options",
      "User",
      "deleteUser",
    );

    this.createRoute(
      "/user/{username}".replace(`{${"username"}}`, ":username"),
      "get",
      "User",
      "getUserByName",
    );
    this.createRoute(
      "/user/{username}".replace(`{${"username"}}`, ":username"),
      "options",
      "User",
      "getUserByName",
    );

    this.createRoute(
      "/user/{username}".replace(`{${"username"}}`, ":username"),
      "put",
      "User",
      "updateUser",
    );
    this.createRoute(
      "/user/{username}".replace(`{${"username"}}`, ":username"),
      "options",
      "User",
      "updateUser",
    );

    this.app.use(async (_ctx, next) => {
      await next();
      super.notifyAllEndRouteListeners();
    });

    this.app.use(this.router.routes());
    this.app.use(this.router.allowedMethods());
  }

  private createRoute(
    localVarPath: string,
    httpMethod: string,
    controllerId: string,
    operationId: string,
  ): void {
    const middlewarePromise = async (
      context: RouterContext<string, any, Record<string, any>>,
    ) => {
      try {
        const openApiRequest = await OakOpenApiRequest.build(context);
        const response: Response = await this.executeController(
          controllerId,
          operationId,
          openApiRequest,
        );
        context.response.status = response.status;
        context.response.body = await response.json();
        context.response.headers = response.headers;
        this.checkAccessControlAllowOrigin(
          context.request.headers,
          context.response.headers,
        );
      } catch (e) {
        context.response.status = 500;
        context.response.body = { error: e.message };
      }
    };

    if (httpMethod == "get") {
      this.router.get(localVarPath, middlewarePromise);
    } else if (httpMethod == "post") {
      this.router.post(localVarPath, middlewarePromise);
    } else if (httpMethod == "delete") {
      this.router.delete(localVarPath, middlewarePromise);
    } else if (httpMethod == "put") {
      this.router.put(localVarPath, middlewarePromise);
    } else if (httpMethod == "options") {
      this.router.options(localVarPath, middlewarePromise);
    } else {
      throw new Error("Unknown HTTP verb: " + httpMethod);
    }
  }

  protected async startServer(port: number): Promise<void> {
    return await this.app.listen({ port });
  }

  execOnMiddleware(
    callback: (middleware: Application, router: Router) => void,
  ): void {
    callback(this.app, this.router);
  }

  private checkAccessControlAllowOrigin(
    requestHeaders: Headers,
    responseHeaders: Headers,
  ): void {
    if (this.options?.allowCORS && requestHeaders.has("origin")) {
      const origin: string | null = requestHeaders.get("origin");
      if (origin && this.options.allowCORS.includes(origin)) {
        responseHeaders.set("Access-Control-Allow-Origin", origin);
        responseHeaders.set(
          "Access-Control-Allow-Headers",
          "cache-control,expires,pragma",
        );
      }
    }
  }
}

export interface DenoOakServerOptions {
  allowCORS?: string[];
}
