/*
* OpenAPI service to implement for Pet.
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
import { ApiResponse } from "../models/ApiResponse.ts";
import { Pet } from "../models/Pet.ts";

export interface PetService {
  /**
   * Add a new pet to the store
   *
   * @param pet Pet Pet object that needs to be added to the store
   * @returns Pet
   */
  addPet(pet: Pet): Promise<Pet>;
  /**
   * Update an existing pet
   *
   * @param pet Pet Pet object that needs to be added to the store
   * @returns Pet
   */
  updatePet(pet: Pet): Promise<Pet>;
  /**
   * Finds Pets by status
   * Multiple status values can be provided with comma separated strings
   *
   * @param status Array<'available' | 'pending' | 'sold'> Status values that need to be considered for filter
   * @returns Array<Pet>
   */
  findPetsByStatus(
    status: Array<"available" | "pending" | "sold">,
  ): Promise<Array<Pet>>;
  /**
   * Finds Pets by tags
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   *
   * @param tags Array<string> Tags to filter by
   * @returns Array<Pet>
   */
  findPetsByTags(tags: Array<string>): Promise<Array<Pet>>;
  /**
   * Deletes a pet
   *
   * @param petId number Pet id to delete
   * @param apiKey string  (optional)
   * @returns void: no response value expected for this operation
   */
  deletePet(petId: number, apiKey?: string): Promise<void>;
  /**
   * Find pet by ID
   * Returns a single pet
   *
   * @param petId number ID of pet to return
   * @returns Pet
   */
  getPetById(petId: number): Promise<Pet>;
  /**
   * Updates a pet in the store with form data
   *
   * @param petId number ID of pet that needs to be updated
   * @param name string Updated name of the pet (optional)
   * @param status string Updated status of the pet (optional)
   * @returns void: no response value expected for this operation
   */
  updatePetWithForm(
    petId: number,
    name?: string,
    status?: string,
  ): Promise<void>;
  /**
   * uploads an image
   *
   * @param petId number ID of pet to update
   * @param additionalMetadata string Additional data to pass to server (optional)
   * @param file any file to upload (optional)
   * @returns ApiResponse
   */
  uploadFile(
    petId: number,
    additionalMetadata?: string,
    file?: any,
  ): Promise<ApiResponse>;
}
