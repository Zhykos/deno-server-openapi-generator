{
	"info": {
		"_postman_id": "6ab1ef19-cd94-463d-aeed-641c710bd2a0",
		"name": "PetStore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "-----TODO - Pet",
			"item": [
				{
					"name": "------TODO [POST] Uploads an image",
					"item": []
				},
				{
					"name": "[POST] Add a new pet to the store",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Add a new pet to the store - Undefined ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Invalid ID to add pet: 'undefined'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}pet",
											"host": [
												"{{baseUrl}}pet"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add a new pet to the store - Wrong ID format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Invalid ID to add pet: 'foo'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"foo\",\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}pet",
											"host": [
												"{{baseUrl}}pet"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add a new pet to the store - ID already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"A pet already exists with ID: 0\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}pet",
											"host": [
												"{{baseUrl}}pet"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add a new pet to the store",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"doggie\");\r",
											"    pm.expect(jsonData.status).to.eql(\"available\");\r",
											"    pm.expect(jsonData.id).to.eql(1);\r",
											"    pm.expect(jsonData.category.id).to.eql(0);\r",
											"    pm.expect(jsonData.category.name).to.eql(\"string\");\r",
											"    pm.expect(jsonData.photoUrls.length).to.eql(1);\r",
											"    pm.expect(jsonData.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(jsonData.tags.length).to.eql(1);\r",
											"    pm.expect(jsonData.tags[0].id).to.eql(0);\r",
											"    pm.expect(jsonData.tags[0].name).to.eql(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}pet",
									"host": [
										"{{baseUrl}}pet"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[PUT] Update an existing pet",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Update an existing pet - No ID in json",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check the Pet\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Invalid ID to update pet: 'undefined'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}pet",
											"host": [
												"{{baseUrl}}pet"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an existing pet - Invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check the Pet\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Invalid ID to update pet: 'foo'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"foo\",\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}pet",
											"host": [
												"{{baseUrl}}pet"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an existing pet - ID does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check the Pet\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Cannot update pet with ID: 2\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 2,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}pet",
											"host": [
												"{{baseUrl}}pet"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update an existing pet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"rex\");\r",
											"    pm.expect(jsonData.status).to.eql(\"sold\");\r",
											"    pm.expect(jsonData.id).to.eql(0);\r",
											"    pm.expect(jsonData.category.id).to.eql(0);\r",
											"    pm.expect(jsonData.category.name).to.eql(\"cat\");\r",
											"    pm.expect(jsonData.photoUrls.length).to.eql(1);\r",
											"    pm.expect(jsonData.photoUrls[0]).to.eql(\"url\");\r",
											"    pm.expect(jsonData.tags.length).to.eql(1);\r",
											"    pm.expect(jsonData.tags[0].id).to.eql(0);\r",
											"    pm.expect(jsonData.tags[0].name).to.eql(\"tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"cat\"\n  },\n  \"name\": \"rex\",\n  \"photoUrls\": [\n    \"url\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"tag\"\n    }\n  ],\n  \"status\": \"sold\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}pet",
									"host": [
										"{{baseUrl}}pet"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[GET] Finds Pets by status",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Finds Pets by status - Wrong status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Invalid status to find pet: 'foo'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}pet/findByStatus?status=foo",
											"host": [
												"{{baseUrl}}pet"
											],
											"path": [
												"findByStatus"
											],
											"query": [
												{
													"key": "status",
													"value": "foo"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Finds Pets by status - 1 wrong status & 1 ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Invalid status to find pet: 'foo,available'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}pet/findByStatus?status=foo&status=available",
											"host": [
												"{{baseUrl}}pet"
											],
											"path": [
												"findByStatus"
											],
											"query": [
												{
													"key": "status",
													"value": "foo"
												},
												{
													"key": "status",
													"value": "available"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Finds Pets by status - No status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Invalid status to find pet: ''\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}pet/findByStatus",
											"host": [
												"{{baseUrl}}pet"
											],
											"path": [
												"findByStatus"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Finds Pets by status - available",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    const data = jsonData[0];\r",
											"    pm.expect(data.name).to.eql(\"doggie\");\r",
											"    pm.expect(data.status).to.eql(\"available\");\r",
											"    pm.expect(data.id).to.eql(0);\r",
											"    pm.expect(data.category.id).to.eql(0);\r",
											"    pm.expect(data.category.name).to.eql(\"string\");\r",
											"    pm.expect(data.photoUrls.length).to.eql(1);\r",
											"    pm.expect(data.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(data.tags.length).to.eql(1);\r",
											"    pm.expect(data.tags[0].id).to.eql(0);\r",
											"    pm.expect(data.tags[0].name).to.eql(\"tag01\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByStatus?status=available",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Finds Pets by status - available duplicate arg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    const data = jsonData[0];\r",
											"    pm.expect(data.name).to.eql(\"doggie\");\r",
											"    pm.expect(data.status).to.eql(\"available\");\r",
											"    pm.expect(data.id).to.eql(0);\r",
											"    pm.expect(data.category.id).to.eql(0);\r",
											"    pm.expect(data.category.name).to.eql(\"string\");\r",
											"    pm.expect(data.photoUrls.length).to.eql(1);\r",
											"    pm.expect(data.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(data.tags.length).to.eql(1);\r",
											"    pm.expect(data.tags[0].id).to.eql(0);\r",
											"    pm.expect(data.tags[0].name).to.eql(\"tag01\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByStatus?status=available&status=available",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										},
										{
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Finds Pets by status - sold",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(2);\r",
											"\r",
											"    const dataDoggo = jsonData[0];\r",
											"    pm.expect(dataDoggo.name).to.eql(\"doggo\");\r",
											"    pm.expect(dataDoggo.status).to.eql(\"sold\");\r",
											"    pm.expect(dataDoggo.id).to.eql(7);\r",
											"    pm.expect(dataDoggo.category.id).to.eql(0);\r",
											"    pm.expect(dataDoggo.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDoggo.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.tags.length).to.eql(2);\r",
											"    pm.expect(dataDoggo.tags[0].id).to.eql(0);\r",
											"    pm.expect(dataDoggo.tags[0].name).to.eql(\"yo\");\r",
											"    pm.expect(dataDoggo.tags[1].id).to.eql(1);\r",
											"    pm.expect(dataDoggo.tags[1].name).to.eql(\"cute\");\r",
											"\r",
											"    const dataDog = jsonData[1];\r",
											"    pm.expect(dataDog.name).to.eql(\"dog\");\r",
											"    pm.expect(dataDog.status).to.eql(\"sold\");\r",
											"    pm.expect(dataDog.id).to.eql(12);\r",
											"    pm.expect(dataDog.category.id).to.eql(0);\r",
											"    pm.expect(dataDog.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDog.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDog.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDog.tags).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByStatus?status=sold",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "sold"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Finds Pets by status - pending",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByStatus?status=pending",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "pending"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Finds Pets by status - pending & sold",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(2);\r",
											"\r",
											"    const dataDoggo = jsonData[0];\r",
											"    pm.expect(dataDoggo.name).to.eql(\"doggo\");\r",
											"    pm.expect(dataDoggo.status).to.eql(\"sold\");\r",
											"    pm.expect(dataDoggo.id).to.eql(7);\r",
											"    pm.expect(dataDoggo.category.id).to.eql(0);\r",
											"    pm.expect(dataDoggo.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDoggo.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.tags.length).to.eql(2);\r",
											"    pm.expect(dataDoggo.tags[0].id).to.eql(0);\r",
											"    pm.expect(dataDoggo.tags[0].name).to.eql(\"yo\");\r",
											"    pm.expect(dataDoggo.tags[1].id).to.eql(1);\r",
											"    pm.expect(dataDoggo.tags[1].name).to.eql(\"cute\");\r",
											"\r",
											"    const dataDog = jsonData[1];\r",
											"    pm.expect(dataDog.name).to.eql(\"dog\");\r",
											"    pm.expect(dataDog.status).to.eql(\"sold\");\r",
											"    pm.expect(dataDog.id).to.eql(12);\r",
											"    pm.expect(dataDog.category.id).to.eql(0);\r",
											"    pm.expect(dataDog.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDog.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDog.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDog.tags).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByStatus?status=pending&status=sold",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "pending"
										},
										{
											"key": "status",
											"value": "sold"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Finds Pets by status - available & sold",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(3);\r",
											"\r",
											"    const dataDoggie = jsonData[0];\r",
											"    pm.expect(dataDoggie.name).to.eql(\"doggie\");\r",
											"    pm.expect(dataDoggie.status).to.eql(\"available\");\r",
											"    pm.expect(dataDoggie.id).to.eql(0);\r",
											"    pm.expect(dataDoggie.category.id).to.eql(0);\r",
											"    pm.expect(dataDoggie.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDoggie.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDoggie.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDoggie.tags.length).to.eql(1);\r",
											"    pm.expect(dataDoggie.tags[0].id).to.eql(0);\r",
											"    pm.expect(dataDoggie.tags[0].name).to.eql(\"tag01\");\r",
											"\r",
											"    const dataDoggo = jsonData[1];\r",
											"    pm.expect(dataDoggo.name).to.eql(\"doggo\");\r",
											"    pm.expect(dataDoggo.status).to.eql(\"sold\");\r",
											"    pm.expect(dataDoggo.id).to.eql(7);\r",
											"    pm.expect(dataDoggo.category.id).to.eql(0);\r",
											"    pm.expect(dataDoggo.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDoggo.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.tags.length).to.eql(2);\r",
											"    pm.expect(dataDoggo.tags[0].id).to.eql(0);\r",
											"    pm.expect(dataDoggo.tags[0].name).to.eql(\"yo\");\r",
											"    pm.expect(dataDoggo.tags[1].id).to.eql(1);\r",
											"    pm.expect(dataDoggo.tags[1].name).to.eql(\"cute\");\r",
											"\r",
											"    const dataDog = jsonData[2];\r",
											"    pm.expect(dataDog.name).to.eql(\"dog\");\r",
											"    pm.expect(dataDog.status).to.eql(\"sold\");\r",
											"    pm.expect(dataDog.id).to.eql(12);\r",
											"    pm.expect(dataDog.category.id).to.eql(0);\r",
											"    pm.expect(dataDog.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDog.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDog.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDog.tags).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByStatus?status=available&status=sold&status=pending",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										},
										{
											"key": "status",
											"value": "sold"
										},
										{
											"key": "status",
											"value": "pending"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Finds Pets by status - available & pending",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    const data = jsonData[0];\r",
											"    pm.expect(data.name).to.eql(\"doggie\");\r",
											"    pm.expect(data.status).to.eql(\"available\");\r",
											"    pm.expect(data.id).to.eql(0);\r",
											"    pm.expect(data.category.id).to.eql(0);\r",
											"    pm.expect(data.category.name).to.eql(\"string\");\r",
											"    pm.expect(data.photoUrls.length).to.eql(1);\r",
											"    pm.expect(data.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(data.tags.length).to.eql(1);\r",
											"    pm.expect(data.tags[0].id).to.eql(0);\r",
											"    pm.expect(data.tags[0].name).to.eql(\"tag01\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByStatus?status=available&status=pending",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										},
										{
											"key": "status",
											"value": "pending"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Finds Pets by status - available & sold & pending",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(3);\r",
											"\r",
											"    const dataDoggie = jsonData[0];\r",
											"    pm.expect(dataDoggie.name).to.eql(\"doggie\");\r",
											"    pm.expect(dataDoggie.status).to.eql(\"available\");\r",
											"    pm.expect(dataDoggie.id).to.eql(0);\r",
											"    pm.expect(dataDoggie.category.id).to.eql(0);\r",
											"    pm.expect(dataDoggie.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDoggie.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDoggie.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDoggie.tags.length).to.eql(1);\r",
											"    pm.expect(dataDoggie.tags[0].id).to.eql(0);\r",
											"    pm.expect(dataDoggie.tags[0].name).to.eql(\"tag01\");\r",
											"\r",
											"    const dataDoggo = jsonData[1];\r",
											"    pm.expect(dataDoggo.name).to.eql(\"doggo\");\r",
											"    pm.expect(dataDoggo.status).to.eql(\"sold\");\r",
											"    pm.expect(dataDoggo.id).to.eql(7);\r",
											"    pm.expect(dataDoggo.category.id).to.eql(0);\r",
											"    pm.expect(dataDoggo.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDoggo.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.tags.length).to.eql(2);\r",
											"    pm.expect(dataDoggo.tags[0].id).to.eql(0);\r",
											"    pm.expect(dataDoggo.tags[0].name).to.eql(\"yo\");\r",
											"    pm.expect(dataDoggo.tags[1].id).to.eql(1);\r",
											"    pm.expect(dataDoggo.tags[1].name).to.eql(\"cute\");\r",
											"\r",
											"    const dataDog = jsonData[2];\r",
											"    pm.expect(dataDog.name).to.eql(\"dog\");\r",
											"    pm.expect(dataDog.status).to.eql(\"sold\");\r",
											"    pm.expect(dataDog.id).to.eql(12);\r",
											"    pm.expect(dataDog.category.id).to.eql(0);\r",
											"    pm.expect(dataDog.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDog.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDog.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDog.tags).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByStatus?status=available&status=sold",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										},
										{
											"key": "status",
											"value": "sold"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[GET] Finds Pets by tags (deprecated)",
					"item": [
						{
							"name": "Finds Pets by tags - \"tag01\" tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    const data = jsonData[0];\r",
											"    pm.expect(data.name).to.eql(\"doggie\");\r",
											"    pm.expect(data.status).to.eql(\"available\");\r",
											"    pm.expect(data.id).to.eql(0);\r",
											"    pm.expect(data.category.id).to.eql(0);\r",
											"    pm.expect(data.category.name).to.eql(\"string\");\r",
											"    pm.expect(data.photoUrls.length).to.eql(1);\r",
											"    pm.expect(data.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(data.tags.length).to.eql(1);\r",
											"    pm.expect(data.tags[0].id).to.eql(0);\r",
											"    pm.expect(data.tags[0].name).to.eql(\"tag01\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByTags?tags=tag01",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByTags"
									],
									"query": [
										{
											"key": "tags",
											"value": "tag01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Finds Pets by tags - \"yo\" tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    const dataDoggo = jsonData[0];\r",
											"    pm.expect(dataDoggo.name).to.eql(\"doggo\");\r",
											"    pm.expect(dataDoggo.status).to.eql(\"sold\");\r",
											"    pm.expect(dataDoggo.id).to.eql(7);\r",
											"    pm.expect(dataDoggo.category.id).to.eql(0);\r",
											"    pm.expect(dataDoggo.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDoggo.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.tags.length).to.eql(2);\r",
											"    pm.expect(dataDoggo.tags[0].id).to.eql(0);\r",
											"    pm.expect(dataDoggo.tags[0].name).to.eql(\"yo\");\r",
											"    pm.expect(dataDoggo.tags[1].id).to.eql(1);\r",
											"    pm.expect(dataDoggo.tags[1].name).to.eql(\"cute\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByTags?tags=yo",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByTags"
									],
									"query": [
										{
											"key": "tags",
											"value": "yo"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Finds Pets by tags - \"foo\" tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByTags?tags=foo",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByTags"
									],
									"query": [
										{
											"key": "tags",
											"value": "foo"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Finds Pets by tags - \"yo\" tag duplicate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    const dataDoggo = jsonData[0];\r",
											"    pm.expect(dataDoggo.name).to.eql(\"doggo\");\r",
											"    pm.expect(dataDoggo.status).to.eql(\"sold\");\r",
											"    pm.expect(dataDoggo.id).to.eql(7);\r",
											"    pm.expect(dataDoggo.category.id).to.eql(0);\r",
											"    pm.expect(dataDoggo.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDoggo.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.tags.length).to.eql(2);\r",
											"    pm.expect(dataDoggo.tags[0].id).to.eql(0);\r",
											"    pm.expect(dataDoggo.tags[0].name).to.eql(\"yo\");\r",
											"    pm.expect(dataDoggo.tags[1].id).to.eql(1);\r",
											"    pm.expect(dataDoggo.tags[1].name).to.eql(\"cute\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByTags?tags=yo&tags=yo",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByTags"
									],
									"query": [
										{
											"key": "tags",
											"value": "yo"
										},
										{
											"key": "tags",
											"value": "yo"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Finds Pets by tags - \"tag01\" & \"yo\" tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(2);\r",
											"\r",
											"    const dataDoggie = jsonData[0];\r",
											"    pm.expect(dataDoggie.name).to.eql(\"doggie\");\r",
											"    pm.expect(dataDoggie.status).to.eql(\"available\");\r",
											"    pm.expect(dataDoggie.id).to.eql(0);\r",
											"    pm.expect(dataDoggie.category.id).to.eql(0);\r",
											"    pm.expect(dataDoggie.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDoggie.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDoggie.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDoggie.tags.length).to.eql(1);\r",
											"    pm.expect(dataDoggie.tags[0].id).to.eql(0);\r",
											"    pm.expect(dataDoggie.tags[0].name).to.eql(\"tag01\");\r",
											"\r",
											"    const dataDoggo = jsonData[1];\r",
											"    pm.expect(dataDoggo.name).to.eql(\"doggo\");\r",
											"    pm.expect(dataDoggo.status).to.eql(\"sold\");\r",
											"    pm.expect(dataDoggo.id).to.eql(7);\r",
											"    pm.expect(dataDoggo.category.id).to.eql(0);\r",
											"    pm.expect(dataDoggo.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDoggo.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.tags.length).to.eql(2);\r",
											"    pm.expect(dataDoggo.tags[0].id).to.eql(0);\r",
											"    pm.expect(dataDoggo.tags[0].name).to.eql(\"yo\");\r",
											"    pm.expect(dataDoggo.tags[1].id).to.eql(1);\r",
											"    pm.expect(dataDoggo.tags[1].name).to.eql(\"cute\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByTags?tags=tag01&tags=yo",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByTags"
									],
									"query": [
										{
											"key": "tags",
											"value": "tag01"
										},
										{
											"key": "tags",
											"value": "yo"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Finds Pets by tags - \"tag01\" & \"yo\" & \"foo\" tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(2);\r",
											"\r",
											"    const dataDoggie = jsonData[0];\r",
											"    pm.expect(dataDoggie.name).to.eql(\"doggie\");\r",
											"    pm.expect(dataDoggie.status).to.eql(\"available\");\r",
											"    pm.expect(dataDoggie.id).to.eql(0);\r",
											"    pm.expect(dataDoggie.category.id).to.eql(0);\r",
											"    pm.expect(dataDoggie.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDoggie.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDoggie.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDoggie.tags.length).to.eql(1);\r",
											"    pm.expect(dataDoggie.tags[0].id).to.eql(0);\r",
											"    pm.expect(dataDoggie.tags[0].name).to.eql(\"tag01\");\r",
											"\r",
											"    const dataDoggo = jsonData[1];\r",
											"    pm.expect(dataDoggo.name).to.eql(\"doggo\");\r",
											"    pm.expect(dataDoggo.status).to.eql(\"sold\");\r",
											"    pm.expect(dataDoggo.id).to.eql(7);\r",
											"    pm.expect(dataDoggo.category.id).to.eql(0);\r",
											"    pm.expect(dataDoggo.category.name).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.photoUrls.length).to.eql(1);\r",
											"    pm.expect(dataDoggo.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(dataDoggo.tags.length).to.eql(2);\r",
											"    pm.expect(dataDoggo.tags[0].id).to.eql(0);\r",
											"    pm.expect(dataDoggo.tags[0].name).to.eql(\"yo\");\r",
											"    pm.expect(dataDoggo.tags[1].id).to.eql(1);\r",
											"    pm.expect(dataDoggo.tags[1].name).to.eql(\"cute\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByTags?tags=tag01&tags=yo&tags=foo",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByTags"
									],
									"query": [
										{
											"key": "tags",
											"value": "tag01"
										},
										{
											"key": "tags",
											"value": "yo"
										},
										{
											"key": "tags",
											"value": "foo"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Finds Pets by tags - No tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/findByTags",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"findByTags"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[GET] Find pet by ID",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Find pet by ID - Not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Cannot find pet with ID: 42\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}pet/42",
											"host": [
												"{{baseUrl}}pet"
											],
											"path": [
												"42"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find pet by ID - Wrong type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Invalid ID to find pet: 'NaN'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}pet/ee",
											"host": [
												"{{baseUrl}}pet"
											],
											"path": [
												"ee"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Find pet by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"doggie\");\r",
											"    pm.expect(jsonData.status).to.eql(\"available\");\r",
											"    pm.expect(jsonData.id).to.eql(0);\r",
											"    pm.expect(jsonData.category.id).to.eql(0);\r",
											"    pm.expect(jsonData.category.name).to.eql(\"string\");\r",
											"    pm.expect(jsonData.photoUrls.length).to.eql(1);\r",
											"    pm.expect(jsonData.photoUrls[0]).to.eql(\"string\");\r",
											"    pm.expect(jsonData.tags.length).to.eql(1);\r",
											"    pm.expect(jsonData.tags[0].id).to.eql(0);\r",
											"    pm.expect(jsonData.tags[0].name).to.eql(\"tag01\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/0",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "-----TODO [POST] Updates a pet in the store with form data",
					"item": []
				},
				{
					"name": "[DELETE] Deletes a pet",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Deletes a pet - Not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Cannot delete pet with ID: 1\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}pet/1",
											"host": [
												"{{baseUrl}}pet"
											],
											"path": [
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deletes a pet - Wrong type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Invalid ID to delete pet: 'NaN'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}pet/foo",
											"host": [
												"{{baseUrl}}pet"
											],
											"path": [
												"foo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deletes a pet - Wrong API key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Wrong API key: 'foo'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "default"
											},
											{
												"key": "api_key",
												"value": "foo",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}pet/0",
											"host": [
												"{{baseUrl}}pet"
											],
											"path": [
												"0"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Deletes a pet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/0",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletes a pet - With API key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									},
									{
										"key": "api_key",
										"value": "secret-token",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}pet/0",
									"host": [
										"{{baseUrl}}pet"
									],
									"path": [
										"0"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Store",
			"item": [
				{
					"name": "[POST] Place an order for a pet",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Place an order for a pet - ID already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const order = pm.response.json();\r",
													"    pm.expect(order.message).to.eql(\"An order already exists with ID: 1\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 1,\r\n  \"petId\": 2,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"2022-03-16T13:36:47.437Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}store/order/",
											"host": [
												"{{baseUrl}}store"
											],
											"path": [
												"order",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Place an order for a pet - ID wrong format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const order = pm.response.json();\r",
													"    pm.expect(order.message).to.eql(\"Invalid ID to place order: 'foo'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"foo\",\r\n  \"petId\": 2,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"2022-03-16T13:36:47.437Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}store/order/",
											"host": [
												"{{baseUrl}}store"
											],
											"path": [
												"order",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Place an order for a pet - ID does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const order = pm.response.json();\r",
													"    pm.expect(order.message).to.eql(\"Invalid ID to place order: 'undefined'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"petId\": 2,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"2022-03-16T13:36:47.437Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}store/order/",
											"host": [
												"{{baseUrl}}store"
											],
											"path": [
												"order",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Place an order for a pet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const order2 = pm.response.json();\r",
											"    pm.expect(order2.id).to.eql(3);\r",
											"    pm.expect(order2.petId).to.eql(3);\r",
											"    pm.expect(order2.quantity).to.eql(3);\r",
											"    pm.expect(order2.shipDate).to.eql(\"2022-03-16T13:36:47.437Z\");\r",
											"    pm.expect(order2.status).to.eql(\"placed\");\r",
											"    pm.expect(order2.complete).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 3,\r\n  \"petId\": 3,\r\n  \"quantity\": 3,\r\n  \"shipDate\": \"2022-03-16T13:36:47.437Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}store/order/",
									"host": [
										"{{baseUrl}}store"
									],
									"path": [
										"order",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[GET] Find purchase order by ID",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Find purchase order By ID - ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const order1 = pm.response.json();\r",
													"    pm.expect(order1.message).to.eql(\"Cannot find order with ID: 3\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}store/order/3",
											"host": [
												"{{baseUrl}}store"
											],
											"path": [
												"order",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find purchase order By ID - Wrong format ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const order1 = pm.response.json();\r",
													"    pm.expect(order1.message).to.eql(\"Invalid ID to find order: 'NaN'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}store/order/foo",
											"host": [
												"{{baseUrl}}store"
											],
											"path": [
												"order",
												"foo"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Find purchase order By ID - ID 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const order0 = pm.response.json();\r",
											"    pm.expect(order0.id).to.eql(0);\r",
											"    pm.expect(order0.petId).to.eql(0);\r",
											"    pm.expect(order0.quantity).to.eql(0);\r",
											"    pm.expect(order0.shipDate).to.eql(\"2022\");\r",
											"    pm.expect(order0.status).to.eql(\"placed\");\r",
											"    pm.expect(order0.complete).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}store/order/0",
									"host": [
										"{{baseUrl}}store"
									],
									"path": [
										"order",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find purchase order By ID - ID 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const order1 = pm.response.json();\r",
											"    pm.expect(order1.id).to.eql(1);\r",
											"    pm.expect(order1.petId).to.eql(1);\r",
											"    pm.expect(order1.quantity).to.eql(1);\r",
											"    pm.expect(order1.shipDate).to.eql(\"2022\");\r",
											"    pm.expect(order1.status).to.eql(\"placed\");\r",
											"    pm.expect(order1.complete).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}store/order/1",
									"host": [
										"{{baseUrl}}store"
									],
									"path": [
										"order",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[DELETE] Delete purchase order by ID",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Delete purchase order by ID - ID not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Cannot delete order with ID: 3\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}store/order/3",
											"host": [
												"{{baseUrl}}store"
											],
											"path": [
												"order",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete purchase order by ID - ID wrong format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Invalid ID to delete order: 'NaN'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}store/order/foo",
											"host": [
												"{{baseUrl}}store"
											],
											"path": [
												"order",
												"foo"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete purchase order by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}store/order/0",
									"host": [
										"{{baseUrl}}store"
									],
									"path": [
										"order",
										"0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[GET] Returns pet inventories by status",
					"item": [
						{
							"name": "Returns pet inventories by status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.placed).to.eql(2);\r",
											"    pm.expect(jsonData.approved).to.eql(1);\r",
											"    pm.expect(jsonData.delivered).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}store/inventory",
									"host": [
										"{{baseUrl}}store"
									],
									"path": [
										"inventory"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "-----TODO - User",
			"item": [
				{
					"name": "-----TODO [POST] Creates list of users with given input array 1",
					"item": []
				},
				{
					"name": "-----TODO [POST] Creates list of users with given input array 2",
					"item": []
				},
				{
					"name": "[GET] Get user by user name",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Get user by user name - Not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const json = pm.response.json();\r",
													"    pm.expect(json.message).to.eql(\"Cannot find user with ID: 'Nick'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}user/Nick",
											"host": [
												"{{baseUrl}}user"
											],
											"path": [
												"Nick"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get user by user name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonZhykos = pm.response.json();\r",
											"    pm.expect(jsonZhykos.id).to.eql(0);\r",
											"    pm.expect(jsonZhykos.username).to.eql(\"zhykos\");\r",
											"    pm.expect(jsonZhykos.firstName).to.eql(\"firstName\");\r",
											"    pm.expect(jsonZhykos.lastName).to.eql(\"lastName\");\r",
											"    pm.expect(jsonZhykos.email).to.eql(\"email@www.com\");\r",
											"    pm.expect(jsonZhykos.password).to.eql(\"azerty\");\r",
											"    pm.expect(jsonZhykos.phone).to.eql(\"+3306...\");\r",
											"    pm.expect(jsonZhykos.userStatus).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}user/zhykos",
									"host": [
										"{{baseUrl}}user"
									],
									"path": [
										"zhykos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[PUT] Updated user",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Updated user - Not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const json = pm.response.json();\r",
													"    pm.expect(json.message).to.eql(\"Cannot update user with ID: 'Nick'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}user/Nick",
											"host": [
												"{{baseUrl}}user"
											],
											"path": [
												"Nick"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Updated user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json).to.eql({});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}user/zhykos",
									"host": [
										"{{baseUrl}}user"
									],
									"path": [
										"zhykos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[DELETE] Delete user",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Delete user - Not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const json = pm.response.json();\r",
													"    pm.expect(json.message).to.eql(\"Cannot delete user with ID: 'Nick'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}user/Nick",
											"host": [
												"{{baseUrl}}user"
											],
											"path": [
												"Nick"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json).to.eql({});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}user/zhykos",
									"host": [
										"{{baseUrl}}user"
									],
									"path": [
										"zhykos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "-----TODO [GET] Logs user into the system",
					"item": []
				},
				{
					"name": "-----TODO [GET] Logs out current logged in user session",
					"item": []
				},
				{
					"name": "[POST] Create user",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Create user - Absent username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const json = pm.response.json();\r",
													"    pm.expect(json.message).to.eql(\"Cannot create user\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 0,\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}user",
											"host": [
												"{{baseUrl}}user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user - Duplicate username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check status code\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response time\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON\", function () {\r",
													"    const json = pm.response.json();\r",
													"    pm.expect(json.message).to.eql(\"Cannot create user with username: 'zhykos'\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"zhykos\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}user",
											"host": [
												"{{baseUrl}}user"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json).to.eql({});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}user",
									"host": [
										"{{baseUrl}}user"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "originally downloaded from",
			"value": "https://www.postman.com/navigation-geologist-81350630/workspace/petstore/request/15284061-4e049ba0-b780-48ae-9763-176af01f63c1",
			"type": "default",
			"disabled": true
		},
		{
			"key": "target OpenAPI definition",
			"value": "https://petstore.swagger.io/#/pet",
			"type": "default",
			"disabled": true
		}
	]
}