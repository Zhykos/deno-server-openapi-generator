{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{#-first}}
import { {{classname}}Service } from './services/{{classname}}Service.ts';
import { {{classname}}PrivateService } from './services/{{classname}}PrivateService.ts';
import { {{classname}}Controller } from './controllers/{{classname}}Controller.ts';
{{/-first}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
import { OpenApiRequest } from "./controllers/OpenApiRequestModel.ts";

export abstract class DenoServer {
  private port: number;
  {{#apiInfo}}
  {{#apis}}
  {{#operations}}
  {{#operation}}
  {{#-first}}
  private private{{classname}}Controller: {{classname}}Controller;
  {{/-first}}
  {{/operation}}
  {{/operations}}
  {{/apis}}
  {{/apiInfo}}

  constructor(
    port: number{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}, my{{classname}}Service: {{classname}}Service{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}) {
      this.port = port;
      {{#apiInfo}}
      {{#apis}}
      {{#operations}}
      {{#operation}}
      {{#-first}}
      const private{{classname}}Service = new {{classname}}PrivateService(my{{classname}}Service);
      this.private{{classname}}Controller = new {{classname}}Controller(private{{classname}}Service);
      {{/-first}}
      {{/operation}}
      {{/operations}}
      {{/apis}}
      {{/apiInfo}}
  }

  start(): Promise<void> {
    this.generateRoutes();
    return this.startServer(this.port);
  }

  abstract generateRoutes(): void;

  abstract startServer(port: number): Promise<void>;

  executeController(
    controllerId: string,
    operationId: string,
    openApiRequest: OpenApiRequest): Promise<Response> {
    {{#apiInfo}}
    {{#apis}}
      if (controllerId == "{{classname}}") {
        return this.execute{{classname}}Controller(operationId, openApiRequest);
      }
    {{/apis}}
    {{/apiInfo}}
    throw new Error("Unknown controller: " + controllerId);
  }

  {{#apiInfo}}
  {{#apis}}
    private execute{{classname}}Controller(
    operation: string,
    openApiRequest: OpenApiRequest
  ): Promise<Response> {
  {{#operations}}
  {{#operation}}
    if (operation === "{{{operationId}}}") {
      return this.private{{classname}}Controller.{{{operationId}}}(openApiRequest);
    }
  {{/operation}}
  {{/operations}}
      throw new Error("Unknown service: {{classname}} >> " + operation);
  }

  {{/apis}}
  {{/apiInfo}}
}
