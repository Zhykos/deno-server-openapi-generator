{{! Copyright 2022 Thomas "Zhykos" Cicognani

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. }}
/*
* OpenAPI server.
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{#-first}}
import { {{classname}}Service } from './services/{{classname}}Service.ts';
import { {{classname}}PrivateService } from './services/{{classname}}PrivateService.ts';
import { {{classname}}Controller } from './controllers/{{classname}}Controller.ts';
{{/-first}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
import { OpenApiRequest } from "./controllers/OpenApiRequestModel.ts";

export abstract class DenoServer<M, R> {
  private port: number;
  private endRouteListeners: Array<() => void> = [];
  {{#apiInfo}}
  {{#apis}}
  {{#operations}}
  {{#operation}}
  {{#-first}}
  private private{{classname}}Controller: {{classname}}Controller;
  {{/-first}}
  {{/operation}}
  {{/operations}}
  {{/apis}}
  {{/apiInfo}}

  protected constructor(
    port: number{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}, my{{classname}}Service: {{classname}}Service{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}) {
      this.port = port;
      {{#apiInfo}}
      {{#apis}}
      {{#operations}}
      {{#operation}}
      {{#-first}}
      const private{{classname}}Service = new {{classname}}PrivateService(my{{classname}}Service);
      this.private{{classname}}Controller = new {{classname}}Controller(private{{classname}}Service);
      {{/-first}}
      {{/operation}}
      {{/operations}}
      {{/apis}}
      {{/apiInfo}}
  }

  start(): Promise<void> {
    this.generateRoutes();
    return this.startServer(this.port);
  }

  protected abstract generateRoutes(): void;

  protected abstract startServer(port: number): Promise<void>;

  protected executeController(
    controllerId: string,
    operationId: string,
    openApiRequest: OpenApiRequest): Promise<Response> {
    {{#apiInfo}}
    {{#apis}}
      if (controllerId == "{{classname}}") {
        return this.execute{{classname}}Controller(operationId, openApiRequest);
      }
    {{/apis}}
    {{/apiInfo}}
    throw new Error("Unknown controller: " + controllerId);
  }

  {{#apiInfo}}
  {{#apis}}
    private execute{{classname}}Controller(
    operation: string,
    openApiRequest: OpenApiRequest
  ): Promise<Response> {
  {{#operations}}
  {{#operation}}
    if (operation === "{{{operationId}}}") {
      return this.private{{classname}}Controller.{{{operationId}}}(openApiRequest);
    }
  {{/operation}}
  {{/operations}}
      throw new Error("Unknown service: {{classname}} >> " + operation);
  }

  {{/apis}}
  {{/apiInfo}}

  addEndRouteListener(callback: () => void): void {
    this.endRouteListeners.push(callback);
  }

  protected notifyAllEndRouteListeners(): void {
    this.endRouteListeners.forEach(callback => 
      callback()
    )
  }

  /**
   * Execute something you want on the implemented middleware.
   * Often used for your server implementation if this class does not have enough features.
   * @param callback Your code with the middleware object in argument.
   */
  abstract execOnMiddleware(callback: (middleware: M, router: R) => void): void;
}
