{{! Copyright 2022 Thomas "Zhykos" Cicognani

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. }}
/*
* OpenAPI main controller.
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
import { OpenApiRequest, ParameterObject } from "./OpenApiRequestModel.ts";
import { Helpers } from "./Helpers.ts";

export class Controller {
  static sendResponse(body: any): Response {
    let bodyResponse = "{}";
    if (body instanceof Object) {
      bodyResponse = JSON.stringify(body);
    } else if (typeof(body) === "string") {
      bodyResponse = JSON.stringify(body as string);
    }
    return new Response(bodyResponse, {
      status: 200, // TODO Other codes (eg. 201 for created objects...)
      headers: {
        "content-type": "application/json; charset=utf-8", //TODO must match header accept from request?
      },
    });
  }

  static sendError(error: Error): Response {
    let status = 500;
    if (error instanceof Deno.errors.NotFound) {
      status = 404;
    } else if (error instanceof Deno.errors.InvalidData) {
      status = 400;
    } else if (error instanceof Deno.errors.NotSupported) {
      status = 405;
    } else if (error instanceof Deno.errors.PermissionDenied) {
      status = 403;
    } else if (error instanceof Deno.errors.AlreadyExists) {
      status = 409;
    } else {
      console.error(error);
    }
    return new Response(JSON.stringify({
      message: error.message
    }), {
      status: status,
      headers: {
        "content-type": "application/json; charset=utf-8", //TODO must match header accept from request?
      },
    });
  }

  static collectRequestParams(request: OpenApiRequest): { [index: string]: any } {
    const requestParams: { [index: string]: any } = {};
    const requestBody = request.body;
    if (requestBody) {
      if (Helpers.isJsonBody(request.headers)) {
        requestParams["objBody"] = JSON.parse(requestBody);
      } else if (Helpers.isFormDataBody(request.headers)) {
        const objBody = JSON.parse(requestBody);
        for (const key in objBody) {
          requestParams[key] = objBody[key];
        }
      }
    }

    const openApi = request.openapi;
    if (
      openApi !== undefined && openApi.schema !== undefined &&
      openApi.schema.parameters !== undefined
    ) {
      openApi.schema.parameters.forEach((param: ParameterObject) => {
        if (requestParams[param.name] && param.origin === "query") {
          if (!(requestParams[param.name] instanceof Array)) {
            const previousValue = requestParams[param.name];
            requestParams[param.name] = new Array<string>();
            requestParams[param.name].push(previousValue);
          }
          requestParams[param.name].push(param.value);
        } else {
          requestParams[param.name] = param.value;
        }
      });
    }
    return requestParams;
  }
}