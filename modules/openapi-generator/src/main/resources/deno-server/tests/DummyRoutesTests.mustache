import { assertEquals, fail, readerFromStreamReader, readAll } from "./deps.ts";

// Test all routes from example which always returns an error: this tests is built to check if all routes are generated.
// deno test --allow-net --unstable DummyRoutesTests.ts

const client = Deno.createHttpClient({});

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
Deno.test("check if route exists for service: {{classname}}Service >> {{{operationId}}}", async() => {
    const localVarPath = '{{{path}}}'{{#pathParams}}.replace('{${"{{baseName}}"}}', stubParameter("{{{dataType}}}")){{/pathParams}};
    await assertRouteResult(localVarPath, "{{httpMethod}}", "Method not implemented yet: {{classname}}Service >> {{{operationId}}}");
});

{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}

Deno.test("404 status on root URL", async() => {
    const res = await fetch("http://localhost:3000/", {
        method: "GET",
        client
    });
    await res.body?.cancel();
    assertEquals(res.status, 404);
});

Deno.test("404 status on specific URL", async() => {
    const res = await fetch("http://localhost:3000/zhykos404", {
        method: "GET",
        client
    });
    await res.body?.cancel();
    assertEquals(res.status, 404);
});

function stubParameter(paramType: string): string {
    if (paramType == "number") {
        return encodeURIComponent(String("1"));
    }
    if (paramType == "string") {
        return encodeURIComponent(String("foo"));
    }
    throw new Error("Unknown type to stub: " + paramType);
}

async function assertRouteResult(localVarPath: string, httpMethod: string, expectedErrorMessage: string): Promise<void> {
    const res = await fetch("http://localhost:3000" + localVarPath, {
        method: httpMethod,
        client
    });

    const responseReader: ReadableStreamDefaultReader<Uint8Array> | undefined = await res.body?.getReader();
    assertEquals(res.status, 500);

    if (responseReader) {
        const reader: Deno.Reader = readerFromStreamReader(responseReader);
        const charArray: Uint8Array = await readAll(reader);
        const jsonObj = JSON.parse(new TextDecoder().decode(charArray));
        assertEquals(jsonObj.message, expectedErrorMessage);
    } else {
        fail("Cannot read body");
    }
}