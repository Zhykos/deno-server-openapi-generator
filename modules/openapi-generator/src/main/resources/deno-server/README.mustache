{{! Copyright 2022 Thomas "Zhykos" Cicognani

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. }}
# org.openapitools.server - Deno oak server

Generated by OpenAPI Generator 5.4.0.

## Requires

* Deno: https://deno.land

## Running

Before running the generated server, you must implement the services declared in you OpenAPI file.

Check the constructor in the file `DenoServer.ts`. You'll see a port number and theses services to implement:

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{#-first}}
* `{{classname}}Service` ;
{{/-first}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}

Once all theses services implemented, running Deno is very simple!

Create a simple TypeScript file like this:

```TypeScript
import { DenoOakServer } from "./DenoOakServer.ts";
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{#-first}}
import { My{{classname}}Service } from "./My{{classname}}Service.ts";
{{/-first}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{#-first}}
const my{{classname}}Service = new My{{classname}}Service();
{{/-first}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}

new DenoOakServer(3000{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}, my{{classname}}Service{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}).start();
```

Finally run this command:

```
deno run --allow-net MyDenoOakServer.ts
```

Adapt this command and services with your names. Also check <a href="https://deno.land/manual/getting_started/permissions">Deno security options</a> for the command line.

## Features/Implementation Notes

* Supports JSON inputs/outputs, File inputs, and Form inputs (see ktor documentation for more info).