{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{#-first}}
import { {{classname}}Service } from './services/{{classname}}Service.ts';
{{/-first}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
import { DenoServer } from "./DenoServer.ts";
import { Application, Router } from "./deps-oak.ts";
import type { RouterContext } from "./deps-oak.ts";
import { OakOpenApiRequest } from "./controllers/OakOpenApiRequest.ts";

export class DenoOakServer extends DenoServer {

  private app: Application;

  constructor(
    port: number{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}, my{{classname}}Service: {{classname}}Service{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}) {
      super(port{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}, my{{classname}}Service{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}});
      this.app = new Application();
  }

  generateRoutes(): void {
    const router = new Router();
    router
      .get("/", (context) => {
        context.response.body = "Hello world!";
      });

    {{#apiInfo}}
    {{#apis}}
    {{#operations}}
    {{#operation}}
    this.createRoute(router, '{{{path}}}'{{#pathParams}}.replace(`{${"{{baseName}}"}}`, ":{{baseName}}"){{/pathParams}}, "{{#lowercase}}{{httpMethod}}{{/lowercase}}", "{{classname}}", "{{operationId}}");

    {{/operation}}
    {{/operations}}
    {{/apis}}
    {{/apiInfo}}

    this.app.use(router.routes());
    this.app.use(router.allowedMethods());
  }

  private createRoute(router: Router, localVarPath: string, httpMethod: string, controllerId: string, operationId: string): void {
    const middlewarePromise = async (context: RouterContext<string, any, Record<string, any>>) => {
        const openApiRequest = new OakOpenApiRequest(context);
        const response: Response = await this.executeController(controllerId, operationId, openApiRequest);
        context.response.status = response.status;
        context.response.body = await response.json();
        context.response.headers = response.headers;
      };
    if (httpMethod == "get") {
      router.get(localVarPath, middlewarePromise);
    } else if (httpMethod == "post") {
      router.post(localVarPath, middlewarePromise);
    } else if (httpMethod == "delete") {
      router.delete(localVarPath, middlewarePromise);
    } else if (httpMethod == "put") {
      router.put(localVarPath, middlewarePromise);
    } else {
      throw new Error("Unknown HTTP verb: " + httpMethod);
    }
  }

  async startServer(port: number): Promise<void> {
    return await this.app.listen({ port });
  }

}