{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{#-first}}
import { {{classname}}Service } from './services/{{classname}}Service.ts';
import { {{classname}}PrivateService } from './services/{{classname}}PrivateService.ts';
import { {{classname}}Controller } from './controllers/{{classname}}Controller.ts';
{{/-first}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
import { DenoServer } from "./DenoServer.ts";
import { Application, Router } from "./deps.ts";

export class DenoOakServer implements DenoServer {

  private app: Application;
  private port = 3000;

  constructor() {
    this.app = new Application();
  }

  create(port: number{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}, my{{classname}}Service: {{classname}}Service{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}): DenoOakServer {
    this.port = port;
    this.generateRoutes({{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}my{{classname}}Service{{/-first}}{{/operation}}, {{/operations}}{{/apis}}{{/apiInfo}});
    return this;
  }

  private generateRoutes({{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}my{{classname}}Service: {{classname}}Service{{/-first}}{{/operation}}, {{/operations}}{{/apis}}{{/apiInfo}}) {
    {{#apiInfo}}
    {{#apis}}
    {{#operations}}
    {{#operation}}
    {{#-first}}
    const private{{classname}}Service = new {{classname}}PrivateService(my{{classname}}Service);
    const private{{classname}}Controller = new {{classname}}Controller(private{{classname}}Service);
    {{/-first}}
    {{/operation}}
    {{/operations}}
    {{/apis}}
    {{/apiInfo}}

    const router = new Router();
    router
      .get("/", (context) => {
        context.response.body = "Hello world!";
      });

    let localVarPath;

    {{#apiInfo}}
    {{#apis}}
    {{#operations}}
    {{#operation}}
    localVarPath = `{{{path}}}`{{#pathParams}}.replace(`{${"{{baseName}}"}}`, ":{{baseName}}"){{/pathParams}};
    router
      .{{#lowercase}}{{httpMethod}}{{/lowercase}}(localVarPath, (context) => {
        context.response.status = 500;
      });

    {{/operation}}
    {{/operations}}
    {{/apis}}
    {{/apiInfo}}

    this.app.use(router.routes());
    this.app.use(router.allowedMethods());
  }

  async start(): Promise<void> {
    return await this.app.listen({ port: this.port });
  }

}