{{! Copyright 2022 Thomas "Zhykos" Cicognani

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. }}
/*
* OpenAPI Deno oak server.
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{#-first}}
import { {{classname}}Service } from './services/{{classname}}Service.ts';
{{/-first}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
import { DenoServer } from "./DenoServer.ts";
import { Application, Router } from "./deps-oak.ts";
import type { RouterContext } from "./deps-oak.ts";
import { OakOpenApiRequest } from "./controllers/OakOpenApiRequestModel.ts";

export class DenoOakServer extends DenoServer<Application> {

  private app: Application;

  constructor(
    port: number{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}, my{{classname}}Service: {{classname}}Service{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}) {
      super(port{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}, my{{classname}}Service{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}});
      this.app = new Application();
  }

  protected generateRoutes(): void {
    const router = new Router();

    {{#apiInfo}}
    {{#apis}}
    {{#operations}}
    {{#operation}}
    this.createRoute(router, '{{{path}}}'{{#pathParams}}.replace(`{${"{{baseName}}"}}`, ":{{baseName}}"){{/pathParams}}, "{{#lowercase}}{{httpMethod}}{{/lowercase}}", "{{classname}}", "{{operationId}}");

    {{/operation}}
    {{/operations}}
    {{/apis}}
    {{/apiInfo}}

    this.app.use(async (_ctx, next) => {
      await next();
      super.notifyAllEndRouteListeners();
    });

    this.app.use(router.routes());
    this.app.use(router.allowedMethods());
  }

  private createRoute(router: Router, localVarPath: string, httpMethod: string, controllerId: string, operationId: string): void {
    const middlewarePromise = async (
      context: RouterContext<string, any, Record<string, any>>,
    ) => {
      try {
        const openApiRequest = await OakOpenApiRequest.build(context);
        const response: Response = await this.executeController(
          controllerId,
          operationId,
          openApiRequest,
        );
        context.response.status = response.status;
        context.response.body = await response.json();
        context.response.headers = response.headers;
      } catch(e) {
        context.response.status = 500;
        context.response.body = { error: e.message };
      }
    };

    if (httpMethod == "get") {
      router.get(localVarPath, middlewarePromise);
    } else if (httpMethod == "post") {
      router.post(localVarPath, middlewarePromise);
    } else if (httpMethod == "delete") {
      router.delete(localVarPath, middlewarePromise);
    } else if (httpMethod == "put") {
      router.put(localVarPath, middlewarePromise);
    } else {
      throw new Error("Unknown HTTP verb: " + httpMethod);
    }
  }

  protected async startServer(port: number): Promise<void> {
    return await this.app.listen({ port });
  }

  execOnMiddleware(callback: (middleware: Application) => void): void {
    callback(this.app);
  }
}