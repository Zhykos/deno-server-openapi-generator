{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{#-first}}
import { {{classname}}Service } from './services/{{classname}}Service.ts';
//import { {{classname}}PrivateService } from './services/{{classname}}PrivateService.ts';
//import { {{classname}}Controller } from './controllers/{{classname}}Controller.ts';
{{/-first}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
import { DenoServer } from "./DenoServer.ts";
import { Application, Router } from "./deps.ts";
import type { RouterContext } from "./deps.ts";
import { OakOpenApiRequest } from "./controllers/OakOpenApiRequest.ts";

export class DenoOakServer extends DenoServer {

  private app: Application;

  constructor(
    port: number{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}, my{{classname}}Service: {{classname}}Service{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}) {
      super(port{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}, my{{classname}}Service{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}});
      this.app = new Application();
  }

  generateRoutes(): void {
    const router = new Router();
    router
      .get("/", (context) => {
        context.response.body = "Hello world!";
      });

    let localVarPath: string;

    {{#apiInfo}}
    {{#apis}}
    {{#operations}}
    {{#operation}}
    localVarPath = `{{{path}}}`{{#pathParams}}.replace(`{${"{{baseName}}"}}`, ":{{baseName}}"){{/pathParams}};
    router
      .{{#lowercase}}{{httpMethod}}{{/lowercase}}(localVarPath, async (context: RouterContext<string, any, Record<string, any>>) => {
        const openApiRequest = new OakOpenApiRequest(context);
        const response: Response = await this.execute{{classname}}Controller("{{operationId}}", openApiRequest);
        context.response.status = response.status;
        context.response.body = await response.json();
        context.response.headers = response.headers;
      });

    {{/operation}}
    {{/operations}}
    {{/apis}}
    {{/apiInfo}}

    this.app.use(router.routes());
    this.app.use(router.allowedMethods());
  }

  async startServer(port: number): Promise<void> {
    return await this.app.listen({ port });
  }

}