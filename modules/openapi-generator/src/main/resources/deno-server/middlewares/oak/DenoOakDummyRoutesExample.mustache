import { DenoOakServer } from "./DenoOakServer.ts";
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{#-first}}
import { {{classname}}Service } from './services/{{classname}}Service.ts';
{{/-first}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
{{#models}}
{{#model}}
import { {{classname}} } from "./models/{{classname}}.ts";
{{/model}}
{{/models}}

// Custom services

{{#apiInfo}}
{{#apis}}
class My{{classname}}Service implements {{classname}}Service {
    {{#operations}}
    {{#operation}}
    {{{operationId}}} ({{#allParams}}_{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{^-last}}, {{/-last}}{{/allParams}}) : {{^returnType}}void{{/returnType}}{{#returnType}}{{{.}}}{{/returnType}} {
        throw new Error("Method not implemented yet: {{classname}}Service >> {{{operationId}}}");
    }
    {{/operation}}
    {{/operations}}
}
{{/apis}}
{{/apiInfo}}

// Service instances

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{#-first}}
const my{{classname}}Service: {{classname}}Service = new My{{classname}}Service();
{{/-first}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}

// Create then start Deno server

new DenoOakServer(3000{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}, my{{classname}}Service{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}).start();

// deno run --allow-net --watch DenoOakDummyRoutesExample.ts